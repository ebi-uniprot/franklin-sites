(self.webpackChunkfranklin_sites=self.webpackChunkfranklin_sites||[]).push([[5230],{"./src/components/info-list.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{A:function(){return src_components_info_list}});__webpack_require__("./node_modules/core-js/modules/es.array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.string.includes.js");var classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),decorated_list_item=__webpack_require__("./src/components/decorated-list-item.tsx"),injectStylesIntoStyleTag=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),info_list=__webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[14].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/styles/components/info-list.scss"),info_list_default=__webpack_require__.n(info_list),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(info_list_default(),options),info_list_default()&&info_list_default().locals&&info_list_default().locals;var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const _excluded=["infoData","columns","isCompact","highlightFirstItem","noTitles","className"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(e,r,t){return(r=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==typeof i?i:i+""}(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}var src_components_info_list=_ref=>{let{infoData:infoData,columns:columns,isCompact:isCompact,highlightFirstItem:highlightFirstItem,noTitles:noTitles,className:className}=_ref,props=function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(e.includes(n))continue;t[n]=r[n]}return t}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.includes(o)||{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}(_ref,_excluded);return null==infoData||!infoData.length||infoData.every((infoDatum=>!infoDatum.content))?null:(0,jsx_runtime.jsx)("ul",_objectSpread(_objectSpread({className:classnames_default()(className,"info-list",{"info-list--columns":columns})},props),{},{children:infoData.map(((_ref2,index)=>{let{content:content,title:title,key:key,link:link}=_ref2;return content&&(0,jsx_runtime.jsx)("li",{children:(0,jsx_runtime.jsx)(decorated_list_item.A,{title:title,highlight:0===index&&highlightFirstItem,compact:isCompact,hideTitle:noTitles,link:link,children:content})},key||("string"==typeof title?title:index))}))}))};try{infolist.displayName="infolist",infolist.__docgenInfo={description:"",displayName:"infolist",props:{infoData:{defaultValue:null,description:"An array of objects each containing 'title' and 'content'",name:"infoData",required:!1,type:{name:"InfoListItem[]"}},columns:{defaultValue:null,description:"A boolean indicating whether the component should span multiple\ncolumns on medium to large screens or not.",name:"columns",required:!1,type:{name:"boolean"}},isCompact:{defaultValue:null,description:"A boolean indicating whether the component should render\nas a compact list",name:"isCompact",required:!1,type:{name:"boolean"}},highlightFirstItem:{defaultValue:null,description:"Should the first content item in the InfoList be bold",name:"highlightFirstItem",required:!1,type:{name:"boolean"}},noTitles:{defaultValue:null,description:"Display titles or not",name:"noTitles",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/info-list.tsx#infolist"]={docgenInfo:infolist.__docgenInfo,name:"infolist",path:"src/components/info-list.tsx#infolist"})}catch(__react_docgen_typescript_loader_error){}},"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[14].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/styles/components/info-list.scss":function(module,__unused_webpack_exports,__webpack_require__){var ___CSS_LOADER_API_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":root{--fr--color-sapphire-blue: #014371;--fr--color-sea-blue: #00639a;--fr--color-vivid-cerulean: #00a6d5;--fr--color-medium-turquoise: #46d6fa;--fr--color-gainsborough: #d2dce3;--fr--color-yankees-blue: #161d39;--fr--color-independence: #4e5a71;--fr--color-weldon-blue: #8194a1;--fr--color-pastel-blue: #abc7d6;--fr--color-platinum: #e4e8eb;--fr--color-sky-white: #fbfeff;--fr--color-reviewed: #c39b00;--fr--color-unreviewed: #c0c0c0;--fr--color-reference-proteome: #9d4a4d;--fr--color-uniprotkb: var(--fr--color-sea-blue);--fr--color-uniref: #f2994c;--fr--color-uniparc: #88c19d;--fr--color-proteomes: #e56358;--fr--color-peptide-search: #a748bd;--fr--color-id-mapping: #357b92;--fr--color-blast: #00a6d5;--fr--color-align: #b8ce48;--fr--color-help-green: #28aa50;--fr--color-warning: #ffcc33;--fr--color-failure: #f36968;--fr--color-success: #108f3b;--fr--color-info: #79cbf8;--fr--color-coyote-brown: #966336;--fr--color-outer-space: #374343;--fr--color-bronze: #a65708;--fr--color-link: var(--fr--color-sapphire-blue);--fr--color-selected: var(--fr--color-gainsborough);--fr--color-hover: oklch(from var(--fr--color-platinum) calc(l + 5%) c h);--fr--color-hover: #f5f9fc}:root{--fr--color-sapphire-blue: #014371;--fr--color-sea-blue: #00639a;--fr--color-vivid-cerulean: #00a6d5;--fr--color-medium-turquoise: #46d6fa;--fr--color-gainsborough: #d2dce3;--fr--color-yankees-blue: #161d39;--fr--color-independence: #4e5a71;--fr--color-weldon-blue: #8194a1;--fr--color-pastel-blue: #abc7d6;--fr--color-platinum: #e4e8eb;--fr--color-sky-white: #fbfeff;--fr--color-reviewed: #c39b00;--fr--color-unreviewed: #c0c0c0;--fr--color-reference-proteome: #9d4a4d;--fr--color-uniprotkb: var(--fr--color-sea-blue);--fr--color-uniref: #f2994c;--fr--color-uniparc: #88c19d;--fr--color-proteomes: #e56358;--fr--color-peptide-search: #a748bd;--fr--color-id-mapping: #357b92;--fr--color-blast: #00a6d5;--fr--color-align: #b8ce48;--fr--color-help-green: #28aa50;--fr--color-warning: #ffcc33;--fr--color-failure: #f36968;--fr--color-success: #108f3b;--fr--color-info: #79cbf8;--fr--color-coyote-brown: #966336;--fr--color-outer-space: #374343;--fr--color-bronze: #a65708;--fr--color-link: var(--fr--color-sapphire-blue);--fr--color-selected: var(--fr--color-gainsborough);--fr--color-hover: oklch(from var(--fr--color-platinum) calc(l + 5%) c h);--fr--color-hover: #f5f9fc}.info-list{margin:.25rem 0 1rem 0;list-style:none}@media print,screen and (min-width: 40em){.info-list--columns{column-count:2;column-width:50%}.info-list--columns>*{break-inside:avoid}}","",{version:3,sources:["webpack://./src/styles/_colours.scss","webpack://./src/styles/components/info-list.scss","webpack://./node_modules/foundation-sites/scss/util/_breakpoint.scss","webpack://./src/styles/_mixins.scss"],names:[],mappings:"AAyDA,MAEE,kCAAA,CACA,6BAAA,CACA,mCAAA,CACA,qCAAA,CACA,iCAAA,CAGA,iCAAA,CACA,iCAAA,CACA,gCAAA,CACA,gCAAA,CACA,6BAAA,CACA,8BAAA,CAGA,6BAAA,CACA,+BAAA,CACA,uCAAA,CAGA,gDAAA,CACA,2BAAA,CACA,4BAAA,CACA,8BAAA,CAGA,mCAAA,CACA,+BAAA,CACA,0BAAA,CACA,0BAAA,CAGA,+BAAA,CAGA,4BAAA,CACA,4BAAA,CACA,4BAAA,CACA,yBAAA,CAGA,iCAAA,CACA,gCAAA,CACA,2BAAA,CAGA,gDAAA,CACA,mDAAA,CACA,yEAAA,CAEA,0BAAA,CApDF,MAEE,kCAAA,CACA,6BAAA,CACA,mCAAA,CACA,qCAAA,CACA,iCAAA,CAGA,iCAAA,CACA,iCAAA,CACA,gCAAA,CACA,gCAAA,CACA,6BAAA,CACA,8BAAA,CAGA,6BAAA,CACA,+BAAA,CACA,uCAAA,CAGA,gDAAA,CACA,2BAAA,CACA,4BAAA,CACA,8BAAA,CAGA,mCAAA,CACA,+BAAA,CACA,0BAAA,CACA,0BAAA,CAGA,+BAAA,CAGA,4BAAA,CACA,4BAAA,CACA,4BAAA,CACA,yBAAA,CAGA,iCAAA,CACA,gCAAA,CACA,2BAAA,CAGA,gDAAA,CACA,mDAAA,CACA,yEAAA,CAEA,0BAAA,CCvGF,WACE,sBAAA,CACA,eAAA,CC2KM,0CC5KN,oBACE,cFI4B,CEH5B,gBAAA,CAEA,sBACE,kBAAA,CAAA",sourcesContent:["/* \n** @name Colours\n** @template  ./app/html/colours.html\n** @text-only\n*/\n@import './settings';\n\n// PRIMARY COLOURS\n$colour-sapphire-blue: #014371;\n$colour-sea-blue: #00639a;\n$colour-vivid-cerulean: #00a6d5;\n$colour-medium-turquoise: #46d6fa;\n$colour-gainsborough: #d2dce3;\n\n// GREYSCALE\n$colour-yankees-blue: #161d39;\n$colour-independence: #4e5a71;\n$colour-weldon-blue: #8194a1;\n$colour-pastel-blue: #abc7d6;\n$colour-platinum: #e4e8eb;\n$colour-sky-white: #fbfeff;\n\n// CURATION\n$colour-reviewed: #c39b00;\n$colour-unreviewed: #c0c0c0;\n$colour-reference-proteome: #9d4a4d;\n\n// NAMESPACES\n$colour-uniref: #f2994c;\n$colour-uniparc: #88c19d;\n$colour-proteomes: #e56358;\n\n// TOOLS\n$colour-peptide-search: #a748bd;\n$colour-id-mapping: #357b92;\n$colour-blast: #00a6d5;\n$colour-align: #b8ce48;\n\n// HELP\n$colour-help-green: #28aa50;\n\n// MESSAGE COLOURS\n$colour-warning: #ffcc33;\n$colour-failure: #f36968;\n$colour-success: #108f3b;\n$colour-info: #79cbf8;\n\n// DATA VISUALISATION\n$colour-coyote-brown: #966336;\n$colour-outer-space: #374343;\n$colour-bronze: #a65708;\n\n// COLOUR VARIABLES\n$colour-link: $colour-sapphire-blue;\n$colour-selected: $colour-gainsborough;\n$colour-hover: lighten($colour-platinum, 5%);\n\n:root {\n  // PRIMARY COLOURS\n  --fr--color-sapphire-blue: #014371;\n  --fr--color-sea-blue: #00639a;\n  --fr--color-vivid-cerulean: #00a6d5;\n  --fr--color-medium-turquoise: #46d6fa;\n  --fr--color-gainsborough: #d2dce3;\n\n  // GREYSCALE\n  --fr--color-yankees-blue: #161d39;\n  --fr--color-independence: #4e5a71;\n  --fr--color-weldon-blue: #8194a1;\n  --fr--color-pastel-blue: #abc7d6;\n  --fr--color-platinum: #e4e8eb;\n  --fr--color-sky-white: #fbfeff;\n\n  // CURATION\n  --fr--color-reviewed: #c39b00;\n  --fr--color-unreviewed: #c0c0c0;\n  --fr--color-reference-proteome: #9d4a4d;\n\n  // NAMESPACES\n  --fr--color-uniprotkb: var(--fr--color-sea-blue);\n  --fr--color-uniref: #f2994c;\n  --fr--color-uniparc: #88c19d;\n  --fr--color-proteomes: #e56358;\n\n  // TOOLS\n  --fr--color-peptide-search: #a748bd;\n  --fr--color-id-mapping: #357b92;\n  --fr--color-blast: #00a6d5;\n  --fr--color-align: #b8ce48;\n\n  // HELP\n  --fr--color-help-green: #28aa50;\n\n  // MESSAGE COLOURS\n  --fr--color-warning: #ffcc33;\n  --fr--color-failure: #f36968;\n  --fr--color-success: #108f3b;\n  --fr--color-info: #79cbf8;\n\n  // DATA VISUALISATION\n  --fr--color-coyote-brown: #966336;\n  --fr--color-outer-space: #374343;\n  --fr--color-bronze: #a65708;\n\n  // COLOUR VARIABLES\n  --fr--color-link: var(--fr--color-sapphire-blue);\n  --fr--color-selected: var(--fr--color-gainsborough);\n  --fr--color-hover: oklch(from var(--fr--color-platinum) calc(l + 5%) c h);\n  // Static fallback in case color function are not supported\n  --fr--color-hover: #f5f9fc;\n}\n","@import '../settings';\n@import '../colours';\n@import '../mixins.scss';\n\n$decorative-bar: 0.125rem solid $colour-vivid-cerulean;\n\n.info-list {\n  margin: $global-margin * 0.25 0 2 * $global-margin * 0.5 0;\n  list-style: none;\n}\n\n@include breakpoint(medium) {\n  @include columns('info-list', 2);\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// Patch to fix issue #12080\n$-zf-size: null;\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  \"small\": 0,\n  \"medium\": 640px,\n  \"large\": 1024px,\n  \"xlarge\": 1200px,\n  \"xxlarge\": 1440px,\n) !default;\n\n/// A list of named HiDPI breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries for resolutions.\n/// Values must represent the device pixels / web pixels ration and be unitless or in DPPX.\n/// @type Map\n$breakpoints-hidpi: (\n  \"hidpi-1\": 1,\n  \"hidpi-1-5\": 1.5,\n  \"hidpi-2\": 2,\n  \"retina\": 2,\n  \"hidpi-3\": 3\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'The first key in the $breakpoints map must have a value of \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Web standard Pixels per inch. (1ddpx / $std-web-dpi) = 1dpi\n  // See https://www.w3.org/TR/css-values-3/#absolute-lengths\n  $std-web-dpi: 96;\n\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value of the following breakpoint\n  $bp-next: null;\n  // Value for max-width media queries\n  $bp-min: null;\n  // Value for min-width media queries\n  $bp-max: null;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // If named, name of the breakpoint\n  $name: null;\n  // If the breakpoint is a HiDPI breakpoint\n  $hidpi: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n\n  // If a breakpoint name is given, get its value from the $breakpoints/$breakpoints-hidpi map.\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints, $name);\n      $bp-next: -zf-map-next($breakpoints, $name);\n    }\n    @else if map-has-key($breakpoints-hidpi, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints-hidpi, $name);\n      $bp-next: -zf-map-next-number($breakpoints-hidpi, $bp);\n      $hidpi: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your `$breakpoints` or `$breakpoints-hidpi` setting.';\n    }\n  }\n\n  @if not $name and $dir == 'only' {\n    @warn 'breakpoint(): Only named media queries can have an `only` range.';\n    @return null;\n  }\n\n  // Only 'only' and 'up' have a min limit.\n  @if $dir == 'only' or $dir == 'up' {\n    $bp-min: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n  }\n  // Only 'only' and 'down' have a max limit.\n  @if $dir == 'only' or $dir == 'down' {\n    // If the breakpoint is a value, use it as max limit.\n    @if not $name {\n      $bp-max: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n    }\n    // If the breakpoint is named, the max limit is the following breakpoint - 1px.\n    @else if $bp-next {\n      // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).\n      // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.\n      // See https://github.com/foundation/foundation-sites/issues/11313\n      $bp-max: if($hidpi, $bp-next - divide(1, $std-web-dpi), -zf-bp-to-em($bp-next) - 0.00125);\n    }\n  }\n\n  // Generate the media query string from min and max limits.\n  @if $hidpi {\n    // Generate values in DPI instead of DPPX for an IE9-11/Opera mini compatibility.\n    // See https://caniuse.com/#feat=css-media-resolution\n    $bp-min-dpi: if($bp-min, $bp-min * $std-web-dpi * 1dpi, $bp-min);\n    $bp-max-dpi: if($bp-max, $bp-max * $std-web-dpi * 1dpi, $bp-max);\n    @return zf-str-join(\n      -zf-bp-join($bp-min, $bp-max, '-webkit-min-device-pixel-ratio', '-webkit-max-device-pixel-ratio'),\n      -zf-bp-join($bp-min-dpi, $bp-max-dpi, 'min-resolution', 'max-resolution'),\n      ', ');\n  }\n  @else {\n    @return -zf-bp-join($bp-min, $bp-max);\n  }\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` and `$breakpoints-hidpi` maps, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// If multiple values are passed, the mixin will generate a media query for each of them as described above.\n/// Since the content is duplicated for each breakpoint, this mixin should only be used with properties that\n/// change across breakpoints.\n///\n/// @param {Keyword|Number} $values... - Breakpoint name or px/rem/em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($values...) {\n  @for $i from 1 through length($values) {\n    $value: nth($values, $i);\n    $str: breakpoint($value);\n    $bp: index($-zf-breakpoints-keys, nth($value, 1));\n    $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n    // Direction of media query (up, down, or only)\n    $dir: if(length($value) > 1, nth($value, 2), up);\n\n    $old-zf-size: null;\n\n    // Make breakpoint size available as a variable\n    @if global-variable-exists(-zf-size) {\n      $old-zf-size: $-zf-size;\n    }\n    $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n    // If $str is still an empty string, no media query is needed\n    @if $str == '' {\n      @content;\n    }\n\n    // Otherwise, wrap the content in a media query\n    @else {\n      // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n      // generate print if the breakpoint affects the print-breakpoint (or smaller).\n      // This means the current condition only needs to be extended so 'down' always generates print.\n      @if $bp != null and ($bp <= $pbp or $dir == down) {\n        @media print, screen and #{$str} {\n          @content;\n        }\n      }\n      @else {\n        @media screen and #{$str} {\n          @content;\n        }\n      }\n    }\n\n    $-zf-size: $old-zf-size !global;\n  }\n}\n\n/// Converts the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Find the next number in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $number - Number to use as a starting point.\n///\n/// @returns {Mixed} The number following `$number`, if `$number` was found. If `$number` was not found, or `$number` was the biggest number in the map, returns `null`.\n@function -zf-map-next-number($map, $number) {\n\n  $next-number: null;\n\n  @each $k, $v in $map {\n    @if type-of($v) == 'number' and $v > $number and ($next-number == null or $v < $next-number) {\n      $next-number: $v;\n    }\n  }\n\n  @return $next-number;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found-key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found-key: true;\n    }\n    @if not $found-key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoint - a named or non-named breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n/// Return the best breakpoint to use according to the calling context. It returns in order:\n/// 1. the given `$value` argument if it is not null.\n/// 2. the global breakpoint context `$-zf-size` if it is not null (like if called inside then `breakpoint()` mixin)\n/// 3. the given `$default` argument.\n/// @access private\n///\n/// @param {Keyword} $value [null] - Breakpoint to use in priority if non-null.\n/// @param {Keyword} $default [null] - Breakpoint to use by default if no other value can be used.\n///\n/// @return {Keyword} The resolved breakpoint.\n@function -zf-current-breakpoint($value: null, $default: null) {\n  @if ($value != null) {\n    @return $value;\n  }\n  @else if (variable-exists(-zf-size) and type-of($-zf-size) != 'number') and $-zf-size != null {\n    @return $-zf-size;\n  }\n  @else {\n    @return $default;\n  }\n}\n\n/// Return media query string from the given min and/or max limits.\n/// If a limit is equal to `null` or `0`, it is ignored.\n/// @access private\n///\n/// @param {Number} $min [0] - Min media query limit.\n/// @param {Number} $max [0] - Max media query limit.\n/// @param {String} $min-name ['min-width'] - Name of the min media query limit.\n/// @param {String} $delimiter ['max-width'] - Name of the max media query limit.\n///\n/// @returns {String} Media Query string.\n@function -zf-bp-join(\n  $min: 0,\n  $max: 0,\n  $min-name: 'min-width',\n  $max-name: 'max-width'\n) {\n  @return zf-str-join(\n    if($min and $min > 0, '(#{$min-name}: #{$min})', null),\n    if($max and $max > 0, '(#{$max-name}: #{$max})', null),\n    ' and ');\n}\n\n$small-up: '';\n$small-only: '';\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n$medium-up: '';\n$medium-only: '';\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n$large-up: '';\n$large-only: '';\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n$xlarge-up: '';\n$xlarge-only: '';\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n$xxlarge-up: '';\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n","@use 'sass:math';\n\n@import './settings';\n@import './colours';\n@import './franklin-settings';\n\n@mixin columns($base-class, $number) {\n  .#{$base-class}--columns {\n    column-count: $number;\n    column-width: percentage(math.div(1, $number));\n\n    & > * {\n      break-inside: avoid;\n    }\n  }\n}\n\n@mixin box-shadow($spread: 0.125rem) {\n  box-shadow: 0 0.125rem 0.25rem $spread rgba($colour-yankees-blue, 0.2);\n}\n\n@mixin fs-breakpoints($size) {\n  @if map-has-key($fs-breakpoint-values, $size) {\n    @media #{inspect(map-get($fs-breakpoint-values, $size))} {\n      @content;\n    }\n  }\n}\n\n@mixin ellipsis() {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n"],sourceRoot:""}]),module.exports=___CSS_LOADER_EXPORT___}}]);