import { ReactNode } from 'react';
import { Link, Location } from 'react-router-dom';
import { formatLargeNumber } from '.';

type FacetValue = { label?: ReactNode; value: string; count: number };

export type FacetObject = {
  label?: ReactNode;
  name: string;
  allowMultipleSelection?: boolean;
  values?: FacetValue[];
};

// To hold facets, record of sets
type CustomQueryValue = Record<string, Set<string>>;
// The modified query object, with our custom facet object
export type CustomParsedQuery = Record<string, string | CustomQueryValue>;

/**
 * Takes a search string and parse it, handle facets specifically, keeps them
 * as sets of values
 */
export const parse = (
  string: string,
  queryStringKey = 'facets'
): CustomParsedQuery => {
  const parsed = new URLSearchParams(string);
  const customParsed: CustomParsedQuery = Object.fromEntries(parsed);
  const queryStringFacet = parsed.get(queryStringKey);
  if (!queryStringFacet) {
    return customParsed;
  }
  const facetTokens = queryStringFacet
    .split(',')
    .map((stringTuple) => stringTuple.split(':'));
  const facets: CustomQueryValue = {};
  for (const [name, value] of facetTokens) {
    if (!facets[name]) {
      facets[name] = new Set();
    }
    facets[name].add(value);
  }
  customParsed[queryStringKey] = facets;
  return customParsed;
};

/**
 * Takes a parsed search object (as generated by the previous "parse" function)
 * and generate a search string
 */
export const stringify = (
  query: CustomParsedQuery,
  queryStringKey = 'facets'
): string => {
  const { [queryStringKey]: facets = {}, ...rest } = query;
  const facetString = Object.entries(facets as CustomQueryValue)
    .map(([name, values]) =>
      Array.from(values).map((value) => `${name}:${value}`)
    )
    .flat()
    .join(',');
  const sp = new URLSearchParams(rest as Record<string, string>);
  if (!facetString) {
    return sp.toString();
  }
  sp.set(queryStringKey, facetString);
  return sp.toString();
};

export const convertValuesToLinks = (
  facet: FacetObject,
  location: Location,
  facetClickHandler?: (event: React.MouseEvent<HTMLElement>) => void,
  queryStringKey = 'facets'
) => {
  const search = parse(location.search, queryStringKey);
  const queryField = search[queryStringKey] as CustomQueryValue | undefined;
  const values = facet.values?.map(({ value, label, count }) => {
    const isActive = queryField?.[facet.name]?.has(value);
    const facetSet = new Set(
      facet.allowMultipleSelection && queryField ? queryField[facet.name] : null
    );
    facetSet[isActive ? 'delete' : 'add'](value);
    const to = {
      ...location,
      search: stringify(
        {
          ...search,
          [queryStringKey]: {
            ...queryField,
            [facet.name]: facetSet,
          },
        },
        queryStringKey
      ),
    };
    return (
      <Link
        key={`${facet.name}_${value}`}
        to={to}
        className={isActive ? 'facet-active' : undefined}
        onClick={facetClickHandler}
      >
        {label || value}
        {` (${formatLargeNumber(count)})`}
      </Link>
    );
  });
  return { ...facet, values };
};
