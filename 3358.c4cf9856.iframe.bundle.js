(self.webpackChunkfranklin_sites=self.webpackChunkfranklin_sites||[]).push([[3358],{"./src/components/decorated-list-item.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{A:function(){return src_components_decorated_list_item}});var defineProperty=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),objectWithoutProperties=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),injectStylesIntoStyleTag=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),decorated_list_item=__webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[15].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[15].use[2]!./src/styles/components/decorated-list-item.scss"),decorated_list_item_default=__webpack_require__.n(decorated_list_item),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(decorated_list_item_default(),options),decorated_list_item_default()&&decorated_list_item_default().locals&&decorated_list_item_default().locals;var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const _excluded=["title","children","link","highlight","compact","hideTitle","inline","className","altStyle"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){(0,defineProperty.A)(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}const DecoratedListItem=_ref=>{let{title:title,children:children,link:link,highlight:highlight,compact:compact,hideTitle:hideTitle,inline:inline,className:className,altStyle:altStyle}=_ref,props=(0,objectWithoutProperties.A)(_ref,_excluded);return(0,jsx_runtime.jsxs)("div",_objectSpread(_objectSpread({className:classnames_default()(className,"decorated-list-item",{"decorated-list-item--compact":compact,"decorated-list-item--no-title":hideTitle,"decorated-list-item--inline":inline,"decorated-list-item--alt-style":altStyle,"decorated-list-item--has-link":link})},props),{},{children:[link&&(0,jsx_runtime.jsx)(link.type,_objectSpread(_objectSpread({},link.props),{},{"aria-hidden":"true",tabIndex:-1})),title&&(0,jsx_runtime.jsx)("div",{className:"decorated-list-item__title tiny",children:title}),(0,jsx_runtime.jsx)("div",{className:"decorated-list-item__content",children:highlight?(0,jsx_runtime.jsx)("strong",{children:children}):children})]}))};DecoratedListItem.displayName="DecoratedListItem";var src_components_decorated_list_item=DecoratedListItem;try{decoratedlistitem.displayName="decoratedlistitem",decoratedlistitem.__docgenInfo={description:"",displayName:"decoratedlistitem",props:{title:{defaultValue:null,description:"Title",name:"title",required:!1,type:{name:"ReactNode"}},highlight:{defaultValue:null,description:"Make this item visually stand-out",name:"highlight",required:!1,type:{name:"boolean"}},link:{defaultValue:null,description:"Target/link of the list item when clicking on it",name:"link",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},compact:{defaultValue:null,description:"Compact style",name:"compact",required:!1,type:{name:"boolean"}},hideTitle:{defaultValue:null,description:"Hide the title",name:"hideTitle",required:!1,type:{name:"boolean"}},inline:{defaultValue:null,description:"Attempts to keep the element horizontally aligned with its siblings",name:"inline",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Optional CSS classnames to be passed down from the parent component",name:"className",required:!1,type:{name:"string"}},altStyle:{defaultValue:null,description:"Switches to an alternative style for the decorative line",name:"altStyle",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/decorated-list-item.tsx#decoratedlistitem"]={docgenInfo:decoratedlistitem.__docgenInfo,name:"decoratedlistitem",path:"src/components/decorated-list-item.tsx#decoratedlistitem"})}catch(__react_docgen_typescript_loader_error){}},"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[15].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[15].use[2]!./src/styles/components/decorated-list-item.scss":function(module,__unused_webpack_exports,__webpack_require__){var ___CSS_LOADER_API_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".decorated-list-item{display:flex;align-items:baseline;padding:.25rem 0;align-items:stretch}.decorated-list-item__title{flex-basis:10vw;flex-shrink:0;text-align:right;padding-right:.7rem}.decorated-list-item__title .tiny{line-height:1}.decorated-list-item__content{flex-grow:1;padding-left:.7rem;padding-top:.1rem;padding-bottom:.1rem;border-left:.125rem solid #00a6d5}.decorated-list-item__content ul{margin-bottom:0}.decorated-list-item--compact{border-left:.125rem solid #00a6d5;padding:0 0 0 .7rem;margin:0}.decorated-list-item--compact .decorated-list-item__title{font-size:1rem;flex:0;text-align:left;white-space:nowrap;margin-right:0}.decorated-list-item--compact .decorated-list-item__title .tiny{line-height:1;font-size:1rem;margin:0}.decorated-list-item--compact .decorated-list-item__content{font-size:1rem;flex:1;margin:0;padding:0;border-left:none}.decorated-list-item--no-title .decorated-list-item{margin-bottom:.5rem}.decorated-list-item--no-title .decorated-list-item__title{display:none}.decorated-list-item--inline{flex-grow:1;flex-basis:0}.decorated-list-item--alt-style{border-left:.25rem solid #abc7d6}.decorated-list-item--alt-style .decorated-list-item__title{padding:0}.decorated-list-item--alt-style .decorated-list-item__content h5{margin:0;line-height:1.25;font-weight:600}.decorated-list-item>a{position:absolute;top:0;bottom:0;left:0;right:0;cursor:pointer}.decorated-list-item--has-link{transition:.5s background-color ease;position:relative}.decorated-list-item--has-link:hover,.decorated-list-item--has-link:focus-within{background-color:#eff1f3}.decorated-list-item--has-link *{pointer-events:none}.decorated-list-item--has-link a,.decorated-list-item--has-link button,.decorated-list-item--has-link input,.decorated-list-item--has-link label{pointer-events:initial}@media print,screen and (max-width: 39.99875em){.decorated-list-item{display:block}.decorated-list-item__title{text-align:left}.decorated-list-item__content{border-left:none;padding-left:0;padding-top:0}}","",{version:3,sources:["webpack://./src/styles/components/decorated-list-item.scss","webpack://./node_modules/foundation-sites/scss/util/_breakpoint.scss"],names:[],mappings:"AAOA,qBAEE,YAAA,CACA,oBAAA,CACA,gBAAA,CACA,mBAAA,CAEA,4BACE,eAAA,CACA,aAAA,CACA,gBAAA,CACA,mBAAA,CACA,kCACE,aAAA,CAIJ,8BACE,WAAA,CACA,kBAAA,CACA,iBAAA,CACA,oBAAA,CACA,iCAzBa,CA0Bb,iCACE,eAAA,CAIJ,8BACE,iCAhCa,CAiCb,mBAAA,CACA,QAAA,CAEA,0DACE,cAAA,CAMA,MAAA,CACA,eAAA,CACA,kBAAA,CACA,cAAA,CARA,gEACE,aAAA,CACA,cAAA,CACA,QAAA,CAOJ,4DACE,cAAA,CACA,MAAA,CACA,QAAA,CACA,SAAA,CACA,gBAAA,CAKF,oDACE,mBAAA,CAEF,2DACE,YAAA,CAKJ,6BACE,WAAA,CACA,YAAA,CAGF,gCACE,gCAxEiB,CA0EjB,4DACE,SAAA,CAIA,iEACE,QAAA,CACA,gBAAA,CACA,eAAA,CAKN,uBACE,iBAAA,CACA,KAAA,CACA,QAAA,CACA,MAAA,CACA,OAAA,CACA,cAAA,CAIF,+BACE,oCAAA,CACA,iBAAA,CAEA,iFAEE,wBAAA,CAGF,iCACE,mBAAA,CAGF,iJAIE,sBAAA,CC4DE,gDDtDN,qBACE,aAAA,CAEA,4BACE,eAAA,CAEF,8BACE,gBAAA,CACA,cAAA,CACA,aAAA,CAAA",sourcesContent:["@import '../settings';\n@import '../colours';\n@import '../mixins.scss';\n\n$decorative-bar: 0.125rem solid $colour-vivid-cerulean;\n$alt-decorative-bar: 0.25rem solid $colour-pastel-blue;\n\n.decorated-list-item {\n  $self: &;\n  display: flex;\n  align-items: baseline;\n  padding: 0.25rem 0;\n  align-items: stretch;\n\n  &__title {\n    flex-basis: 10vw;\n    flex-shrink: 0;\n    text-align: right;\n    padding-right: 0.7rem;\n    .tiny {\n      line-height: 1;\n    }\n  }\n\n  &__content {\n    flex-grow: 1;\n    padding-left: 0.7rem;\n    padding-top: 0.1rem;\n    padding-bottom: 0.1rem;\n    border-left: $decorative-bar;\n    ul {\n      margin-bottom: 0;\n    }\n  }\n\n  &--compact {\n    border-left: $decorative-bar;\n    padding: 0 0 0 0.7rem;\n    margin: 0;\n\n    #{ $self }__title {\n      font-size: 1rem;\n      .tiny {\n        line-height: 1;\n        font-size: 1rem;\n        margin: 0;\n      }\n      flex: 0;\n      text-align: left;\n      white-space: nowrap;\n      margin-right: 0;\n    }\n    #{ $self }__content {\n      font-size: 1rem;\n      flex: 1;\n      margin: 0;\n      padding: 0;\n      border-left: none;\n    }\n  }\n\n  &--no-title {\n    #{ $self } {\n      margin-bottom: 0.5rem;\n    }\n    #{ $self }__title {\n      display: none;\n    }\n  }\n\n  // IMPORTANT: The parent should have set `display: inline-flex;` for this to work\n  &--inline {\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n\n  &--alt-style {\n    border-left: $alt-decorative-bar;\n\n    #{ $self }__title {\n      padding: 0;\n    }\n\n    #{ $self }__content {\n      h5 {\n        margin: 0;\n        line-height: 1.25;\n        font-weight: 600;\n      }\n    }\n  }\n\n  & > a {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    cursor: pointer;\n  }\n\n  // Lifted from card style\n  &--has-link {\n    transition: 0.5s background-color ease;\n    position: relative; // Needed this otherwise the whole list becomes the anchor element\n\n    &:hover,\n    &:focus-within {\n      background-color: scale-color($color: $colour-platinum, $lightness: 40%);\n    }\n\n    * {\n      pointer-events: none;\n    }\n\n    a,\n    button,\n    input,\n    label {\n      pointer-events: initial;\n    }\n  }\n}\n\n@include breakpoint(small only) {\n  .decorated-list-item {\n    display: block;\n\n    &__title {\n      text-align: left;\n    }\n    &__content {\n      border-left: none;\n      padding-left: 0;\n      padding-top: 0;\n    }\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// Patch to fix issue #12080\n$-zf-size: null;\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  \"small\": 0,\n  \"medium\": 640px,\n  \"large\": 1024px,\n  \"xlarge\": 1200px,\n  \"xxlarge\": 1440px,\n) !default;\n\n/// A list of named HiDPI breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries for resolutions.\n/// Values must represent the device pixels / web pixels ration and be unitless or in DPPX.\n/// @type Map\n$breakpoints-hidpi: (\n  \"hidpi-1\": 1,\n  \"hidpi-1-5\": 1.5,\n  \"hidpi-2\": 2,\n  \"retina\": 2,\n  \"hidpi-3\": 3\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'The first key in the $breakpoints map must have a value of \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Web standard Pixels per inch. (1ddpx / $std-web-dpi) = 1dpi\n  // See https://www.w3.org/TR/css-values-3/#absolute-lengths\n  $std-web-dpi: 96;\n\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value of the following breakpoint\n  $bp-next: null;\n  // Value for max-width media queries\n  $bp-min: null;\n  // Value for min-width media queries\n  $bp-max: null;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // If named, name of the breakpoint\n  $name: null;\n  // If the breakpoint is a HiDPI breakpoint\n  $hidpi: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n\n  // If a breakpoint name is given, get its value from the $breakpoints/$breakpoints-hidpi map.\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints, $name);\n      $bp-next: -zf-map-next($breakpoints, $name);\n    }\n    @else if map-has-key($breakpoints-hidpi, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints-hidpi, $name);\n      $bp-next: -zf-map-next-number($breakpoints-hidpi, $bp);\n      $hidpi: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your `$breakpoints` or `$breakpoints-hidpi` setting.';\n    }\n  }\n\n  @if not $name and $dir == 'only' {\n    @warn 'breakpoint(): Only named media queries can have an `only` range.';\n    @return null;\n  }\n\n  // Only 'only' and 'up' have a min limit.\n  @if $dir == 'only' or $dir == 'up' {\n    $bp-min: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n  }\n  // Only 'only' and 'down' have a max limit.\n  @if $dir == 'only' or $dir == 'down' {\n    // If the breakpoint is a value, use it as max limit.\n    @if not $name {\n      $bp-max: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n    }\n    // If the breakpoint is named, the max limit is the following breakpoint - 1px.\n    @else if $bp-next {\n      // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).\n      // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.\n      // See https://github.com/foundation/foundation-sites/issues/11313\n      $bp-max: if($hidpi, $bp-next - divide(1, $std-web-dpi), -zf-bp-to-em($bp-next) - 0.00125);\n    }\n  }\n\n  // Generate the media query string from min and max limits.\n  @if $hidpi {\n    // Generate values in DPI instead of DPPX for an IE9-11/Opera mini compatibility.\n    // See https://caniuse.com/#feat=css-media-resolution\n    $bp-min-dpi: if($bp-min, $bp-min * $std-web-dpi * 1dpi, $bp-min);\n    $bp-max-dpi: if($bp-max, $bp-max * $std-web-dpi * 1dpi, $bp-max);\n    @return zf-str-join(\n      -zf-bp-join($bp-min, $bp-max, '-webkit-min-device-pixel-ratio', '-webkit-max-device-pixel-ratio'),\n      -zf-bp-join($bp-min-dpi, $bp-max-dpi, 'min-resolution', 'max-resolution'),\n      ', ');\n  }\n  @else {\n    @return -zf-bp-join($bp-min, $bp-max);\n  }\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` and `$breakpoints-hidpi` maps, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// If multiple values are passed, the mixin will generate a media query for each of them as described above.\n/// Since the content is duplicated for each breakpoint, this mixin should only be used with properties that\n/// change across breakpoints.\n///\n/// @param {Keyword|Number} $values... - Breakpoint name or px/rem/em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($values...) {\n  @for $i from 1 through length($values) {\n    $value: nth($values, $i);\n    $str: breakpoint($value);\n    $bp: index($-zf-breakpoints-keys, nth($value, 1));\n    $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n    // Direction of media query (up, down, or only)\n    $dir: if(length($value) > 1, nth($value, 2), up);\n\n    $old-zf-size: null;\n\n    // Make breakpoint size available as a variable\n    @if global-variable-exists(-zf-size) {\n      $old-zf-size: $-zf-size;\n    }\n    $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n    // If $str is still an empty string, no media query is needed\n    @if $str == '' {\n      @content;\n    }\n\n    // Otherwise, wrap the content in a media query\n    @else {\n      // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n      // generate print if the breakpoint affects the print-breakpoint (or smaller).\n      // This means the current condition only needs to be extended so 'down' always generates print.\n      @if $bp != null and ($bp <= $pbp or $dir == down) {\n        @media print, screen and #{$str} {\n          @content;\n        }\n      }\n      @else {\n        @media screen and #{$str} {\n          @content;\n        }\n      }\n    }\n\n    $-zf-size: $old-zf-size !global;\n  }\n}\n\n/// Converts the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Find the next number in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $number - Number to use as a starting point.\n///\n/// @returns {Mixed} The number following `$number`, if `$number` was found. If `$number` was not found, or `$number` was the biggest number in the map, returns `null`.\n@function -zf-map-next-number($map, $number) {\n\n  $next-number: null;\n\n  @each $k, $v in $map {\n    @if type-of($v) == 'number' and $v > $number and ($next-number == null or $v < $next-number) {\n      $next-number: $v;\n    }\n  }\n\n  @return $next-number;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found-key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found-key: true;\n    }\n    @if not $found-key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoint - a named or non-named breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n/// Return the best breakpoint to use according to the calling context. It returns in order:\n/// 1. the given `$value` argument if it is not null.\n/// 2. the global breakpoint context `$-zf-size` if it is not null (like if called inside then `breakpoint()` mixin)\n/// 3. the given `$default` argument.\n/// @access private\n///\n/// @param {Keyword} $value [null] - Breakpoint to use in priority if non-null.\n/// @param {Keyword} $default [null] - Breakpoint to use by default if no other value can be used.\n///\n/// @return {Keyword} The resolved breakpoint.\n@function -zf-current-breakpoint($value: null, $default: null) {\n  @if ($value != null) {\n    @return $value;\n  }\n  @else if (variable-exists(-zf-size) and type-of($-zf-size) != 'number') and $-zf-size != null {\n    @return $-zf-size;\n  }\n  @else {\n    @return $default;\n  }\n}\n\n/// Return media query string from the given min and/or max limits.\n/// If a limit is equal to `null` or `0`, it is ignored.\n/// @access private\n///\n/// @param {Number} $min [0] - Min media query limit.\n/// @param {Number} $max [0] - Max media query limit.\n/// @param {String} $min-name ['min-width'] - Name of the min media query limit.\n/// @param {String} $delimiter ['max-width'] - Name of the max media query limit.\n///\n/// @returns {String} Media Query string.\n@function -zf-bp-join(\n  $min: 0,\n  $max: 0,\n  $min-name: 'min-width',\n  $max-name: 'max-width'\n) {\n  @return zf-str-join(\n    if($min and $min > 0, '(#{$min-name}: #{$min})', null),\n    if($max and $max > 0, '(#{$max-name}: #{$max})', null),\n    ' and ');\n}\n\n$small-up: '';\n$small-only: '';\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n$medium-up: '';\n$medium-only: '';\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n$large-up: '';\n$large-only: '';\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n$xlarge-up: '';\n$xlarge-only: '';\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n$xxlarge-up: '';\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n"],sourceRoot:""}]),module.exports=___CSS_LOADER_EXPORT___}}]);